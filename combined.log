{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-04T04:44:45.384Z"}
{"level":"warn","message":"Command stderr:","stderr":"Starting property search...\nError occurred: scrape_property() got an unexpected keyword argument 'include_photos'\n{\"error\": \"scrape_property() got an unexpected keyword argument 'include_photos'\"}\n","timestamp":"2025-01-04T04:44:50.796Z"}
{"error":{"cmd":"cd \"/Users/andrewshwetzer/HomeHarvest\" && poetry run python3 -c \"\nimport sys\nfrom homeharvest import scrape_property\nimport json\n\ntry:\n    print(\\\"Starting property search...\\\", file=sys.stderr)\n    properties = scrape_property(\n        location='78701',\n        listing_type='for_sale',\n        property_type=[\\\"House\\\"],\n        past_days=30,\n        include_photos=True\n    )\n    print(f\\\"Found {len(properties)} properties before filtering\\\", file=sys.stderr)\n    \n    # Apply all filters using AND logic\n    filtered = properties[\n        (properties['beds'] >= 0)\n        \n        & (properties['full_baths'] >= 0)\n        \n        & (properties['list_price'] >= 0)\n        & (properties['list_price'] <= 1000000)\n    ]\n    \n    # Convert to dictionary and ensure photo_urls are included\n    result = []\n    for _, row in filtered.iterrows():\n        property_dict = row.to_dict()\n        if 'photo_urls' not in property_dict or not property_dict['photo_urls']:\n            property_dict['photo_urls'] = []\n        result.append(property_dict)\n    \n    print(json.dumps(result))\nexcept Exception as e:\n    print(f\\\"Error occurred: {str(e)}\\\", file=sys.stderr)\n    print(json.dumps({'error': str(e)}), file=sys.stderr)\n    sys.exit(1)\n\"","code":1,"killed":false,"signal":null},"level":"error","message":"Error executing command:","stderr":"Starting property search...\nError occurred: scrape_property() got an unexpected keyword argument 'include_photos'\n{\"error\": \"scrape_property() got an unexpected keyword argument 'include_photos'\"}\n","timestamp":"2025-01-04T04:44:50.797Z"}
{"level":"info","message":"GET /api/properties?zipcode=78701 500 1536ms","meta":{"req":{"headers":{"accept":"*/*","host":"localhost:3001","user-agent":"curl/8.6.0","x-api-key":"test-api-key"},"httpVersion":"1.1","method":"GET","originalUrl":"/api/properties?zipcode=78701","query":{"zipcode":"78701"},"url":"/api/properties?zipcode=78701"},"res":{"statusCode":500},"responseTime":1536},"timestamp":"2025-01-04T04:44:50.800Z"}
{"level":"warn","message":"Command stderr:","stderr":"Starting property search...\nError occurred: scrape_property() got an unexpected keyword argument 'include_photos'\n{\"error\": \"scrape_property() got an unexpected keyword argument 'include_photos'\"}\n","timestamp":"2025-01-04T04:45:23.782Z"}
{"error":{"cmd":"cd \"/Users/andrewshwetzer/HomeHarvest\" && poetry run python3 -c \"\nimport sys\nfrom homeharvest import scrape_property\nimport json\n\ntry:\n    print(\\\"Starting property search...\\\", file=sys.stderr)\n    properties = scrape_property(\n        location='78701',\n        listing_type='for_sale',\n        property_type=[\\\"House\\\"],\n        past_days=30,\n        include_photos=True\n    )\n    print(f\\\"Found {len(properties)} properties before filtering\\\", file=sys.stderr)\n    \n    # Apply all filters using AND logic\n    filtered = properties[\n        (properties['beds'] >= 0)\n        \n        & (properties['full_baths'] >= 0)\n        \n        & (properties['list_price'] >= 0)\n        & (properties['list_price'] <= 1000000)\n    ]\n    \n    # Convert to dictionary and ensure photo_urls are included\n    result = []\n    for _, row in filtered.iterrows():\n        property_dict = row.to_dict()\n        if 'photo_urls' not in property_dict or not property_dict['photo_urls']:\n            property_dict['photo_urls'] = []\n        result.append(property_dict)\n    \n    print(json.dumps(result))\nexcept Exception as e:\n    print(f\\\"Error occurred: {str(e)}\\\", file=sys.stderr)\n    print(json.dumps({'error': str(e)}), file=sys.stderr)\n    sys.exit(1)\n\"","code":1,"killed":false,"signal":null},"level":"error","message":"Error executing command:","stderr":"Starting property search...\nError occurred: scrape_property() got an unexpected keyword argument 'include_photos'\n{\"error\": \"scrape_property() got an unexpected keyword argument 'include_photos'\"}\n","timestamp":"2025-01-04T04:45:23.782Z"}
{"level":"info","message":"GET /api/properties?zipcode=78701 500 1045ms","meta":{"req":{"headers":{"accept":"*/*","host":"localhost:3001","user-agent":"curl/8.6.0","x-api-key":"test-api-key"},"httpVersion":"1.1","method":"GET","originalUrl":"/api/properties?zipcode=78701","query":{"zipcode":"78701"},"url":"/api/properties?zipcode=78701"},"res":{"statusCode":500},"responseTime":1045},"timestamp":"2025-01-04T04:45:23.784Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-04T04:47:38.063Z"}
{"level":"warn","message":"Command stderr:","stderr":"Starting property search...\nError occurred: 'HOUSE'\n{\"error\": \"'HOUSE'\"}\n","timestamp":"2025-01-04T04:47:48.146Z"}
{"error":{"cmd":"cd \"/Users/andrewshwetzer/HomeHarvest\" && poetry run python3 -c \"\nimport sys\nfrom homeharvest import scrape_property\nimport json\n\ntry:\n    print(\\\"Starting property search...\\\", file=sys.stderr)\n    properties = scrape_property(\n        location='78701',\n        listing_type='for_sale',\n        property_type=[\\\"House\\\"],\n        past_days=30\n    )\n    print(f\\\"Found {len(properties)} properties before filtering\\\", file=sys.stderr)\n    \n    # Apply all filters using AND logic\n    filtered = properties[\n        (properties['beds'] >= 0)\n        \n        & (properties['full_baths'] >= 0)\n        \n        & (properties['list_price'] >= 0)\n        & (properties['list_price'] <= 1000000)\n    ]\n    \n    # Convert to dictionary\n    result = []\n    for _, row in filtered.iterrows():\n        property_dict = row.to_dict()\n        result.append(property_dict)\n    \n    print(json.dumps(result))\nexcept Exception as e:\n    print(f\\\"Error occurred: {str(e)}\\\", file=sys.stderr)\n    print(json.dumps({'error': str(e)}), file=sys.stderr)\n    sys.exit(1)\n\"","code":1,"killed":false,"signal":null},"level":"error","message":"Error executing command:","stderr":"Starting property search...\nError occurred: 'HOUSE'\n{\"error\": \"'HOUSE'\"}\n","timestamp":"2025-01-04T04:47:48.149Z"}
{"level":"info","message":"GET /api/properties?zipcode=78701 500 1237ms","meta":{"req":{"headers":{"accept":"*/*","host":"localhost:3001","user-agent":"curl/8.6.0","x-api-key":"test-api-key"},"httpVersion":"1.1","method":"GET","originalUrl":"/api/properties?zipcode=78701","query":{"zipcode":"78701"},"url":"/api/properties?zipcode=78701"},"res":{"statusCode":500},"responseTime":1237},"timestamp":"2025-01-04T04:47:48.153Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-04T04:48:17.344Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-04T04:57:51.057Z"}
{"level":"info","message":"GET /api/properties?zipcode=78701 200 3ms","meta":{"req":{"headers":{"accept":"*/*","host":"localhost:3001","user-agent":"curl/8.6.0","x-api-key":"test-api-key"},"httpVersion":"1.1","method":"GET","originalUrl":"/api/properties?zipcode=78701","query":{"zipcode":"78701"},"url":"/api/properties?zipcode=78701"},"res":{"statusCode":200},"responseTime":3},"timestamp":"2025-01-04T04:57:52.098Z"}
{"level":"info","message":"POST /api/search 500 1498ms","meta":{"req":{"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-US,en","connection":"keep-alive","content-length":"1628","content-type":"application/json","host":"localhost:3001","origin":"http://localhost:5173","referer":"http://localhost:5173/","sec-ch-ua":"\"Brave\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"macOS\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site","sec-gpc":"1","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"},"httpVersion":"1.1","method":"POST","originalUrl":"/api/search","query":{},"url":"/api/search"},"res":{"statusCode":500},"responseTime":1498},"timestamp":"2025-01-04T16:28:33.465Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-04T17:56:08.799Z"}
{"level":"info","message":"GET /api/properties?zipcode=78701 200 11ms","meta":{"req":{"headers":{"accept":"*/*","host":"localhost:3001","user-agent":"curl/8.6.0","x-api-key":"test-api-key"},"httpVersion":"1.1","method":"GET","originalUrl":"/api/properties?zipcode=78701","query":{"zipcode":"78701"},"url":"/api/properties?zipcode=78701"},"res":{"statusCode":200},"responseTime":11},"timestamp":"2025-01-05T04:26:37.794Z"}
{"level":"info","message":"GET /api/properties?city=Oldsmar&state=Florida&minBeds=0&minBaths=0&minPrice=0&maxPrice=1000000&daysOnMarket=7&propertyTypes=House 200 1ms","meta":{"req":{"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-US,en","connection":"keep-alive","content-type":"application/json","host":"localhost:3001","origin":"http://localhost:5173","referer":"http://localhost:5173/","sec-ch-ua":"\"Brave\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"macOS\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site","sec-gpc":"1","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36","x-api-key":"test-api-key"},"httpVersion":"1.1","method":"GET","originalUrl":"/api/properties?city=Oldsmar&state=Florida&minBeds=0&minBaths=0&minPrice=0&maxPrice=1000000&daysOnMarket=7&propertyTypes=House","query":{"city":"Oldsmar","daysOnMarket":"7","maxPrice":"1000000","minBaths":"0","minBeds":"0","minPrice":"0","propertyTypes":"House","state":"Florida"},"url":"/api/properties?city=Oldsmar&state=Florida&minBeds=0&minBaths=0&minPrice=0&maxPrice=1000000&daysOnMarket=7&propertyTypes=House"},"res":{"statusCode":200},"responseTime":1},"timestamp":"2025-01-05T04:28:47.222Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-05T04:29:55.120Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-05T04:31:57.606Z"}
{"level":"warn","message":"Command stderr:","stderr":"Starting property search...\nError occurred: 'HOUSE'\n{\"error\": \"'HOUSE'\"}\n","timestamp":"2025-01-05T04:32:33.889Z"}
{"error":{"cmd":"cd \"/Users/andrewshwetzer/HomeHarvest\" && poetry run python3 -c \"\nimport sys\nfrom homeharvest import scrape_property\nimport json\n\ntry:\n    print(\\\"Starting property search...\\\", file=sys.stderr)\n    properties = scrape_property(\n        location='Tampa, Florida',\n        listing_type='for_sale',\n        property_type=[\\\"house\\\"],\n        past_days=7\n    )\n    print(f\\\"Found {len(properties)} properties before filtering\\\", file=sys.stderr)\n    \n    # Apply all filters using AND logic\n    filtered = properties[\n        (properties['beds'] >= 1)\n        \n        & (properties['full_baths'] >= 0)\n        \n        & (properties['list_price'] >= 500000)\n        & (properties['list_price'] <= 1000000)\n    ]\n    \n    # Convert to dictionary\n    result = []\n    for _, row in filtered.iterrows():\n        property_dict = row.to_dict()\n        result.append(property_dict)\n    \n    print(json.dumps(result))\nexcept Exception as e:\n    print(f\\\"Error occurred: {str(e)}\\\", file=sys.stderr)\n    print(json.dumps({'error': str(e)}), file=sys.stderr)\n    sys.exit(1)\n\"","code":1,"killed":false,"signal":null},"level":"error","message":"Error executing command:","stderr":"Starting property search...\nError occurred: 'HOUSE'\n{\"error\": \"'HOUSE'\"}\n","timestamp":"2025-01-05T04:32:33.889Z"}
{"level":"info","message":"GET /api/properties?city=Tampa&state=Florida&minBeds=1&minBaths=0&minPrice=500000&maxPrice=1000000&daysOnMarket=7&propertyTypes=House 500 958ms","meta":{"req":{"headers":{"accept":"*/*","accept-encoding":"gzip, deflate, br, zstd","accept-language":"en-US,en","connection":"keep-alive","content-type":"application/json","host":"localhost:3001","origin":"http://localhost:5173","referer":"http://localhost:5173/","sec-ch-ua":"\"Brave\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\"macOS\"","sec-fetch-dest":"empty","sec-fetch-mode":"cors","sec-fetch-site":"same-site","sec-gpc":"1","user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36","x-api-key":"test-api-key"},"httpVersion":"1.1","method":"GET","originalUrl":"/api/properties?city=Tampa&state=Florida&minBeds=1&minBaths=0&minPrice=500000&maxPrice=1000000&daysOnMarket=7&propertyTypes=House","query":{"city":"Tampa","daysOnMarket":"7","maxPrice":"1000000","minBaths":"0","minBeds":"1","minPrice":"500000","propertyTypes":"House","state":"Florida"},"url":"/api/properties?city=Tampa&state=Florida&minBeds=1&minBaths=0&minPrice=500000&maxPrice=1000000&daysOnMarket=7&propertyTypes=House"},"res":{"statusCode":500},"responseTime":958},"timestamp":"2025-01-05T04:32:33.894Z"}
{"level":"info","message":"Server running on port 3001","timestamp":"2025-01-05T04:33:11.381Z"}
